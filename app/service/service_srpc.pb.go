// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.36.0
// source: github.com/rgraphql/demo/app/service/service.proto

package app_service

import (
	context "context"

	srpc "github.com/aperturerobotics/starpc/srpc"
	rgraphql "github.com/rgraphql/rgraphql"
)

type SRPCRgraphqlDemoClient interface {
	// SRPCClient returns the underlying SRPC client.
	SRPCClient() srpc.Client

	// RgraphqlQuery opens a two-way rgraphql query tree stream.
	RgraphqlQuery(ctx context.Context) (SRPCRgraphqlDemo_RgraphqlQueryClient, error)
}

type srpcRgraphqlDemoClient struct {
	cc        srpc.Client
	serviceID string
}

func NewSRPCRgraphqlDemoClient(cc srpc.Client) SRPCRgraphqlDemoClient {
	return &srpcRgraphqlDemoClient{cc: cc, serviceID: SRPCRgraphqlDemoServiceID}
}

func NewSRPCRgraphqlDemoClientWithServiceID(cc srpc.Client, serviceID string) SRPCRgraphqlDemoClient {
	if serviceID == "" {
		serviceID = SRPCRgraphqlDemoServiceID
	}
	return &srpcRgraphqlDemoClient{cc: cc, serviceID: serviceID}
}

func (c *srpcRgraphqlDemoClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcRgraphqlDemoClient) RgraphqlQuery(ctx context.Context) (SRPCRgraphqlDemo_RgraphqlQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, c.serviceID, "RgraphqlQuery", nil)
	if err != nil {
		return nil, err
	}
	strm := &srpcRgraphqlDemo_RgraphqlQueryClient{stream}
	return strm, nil
}

type SRPCRgraphqlDemo_RgraphqlQueryClient interface {
	srpc.Stream
	Send(*rgraphql.RGQLClientMessage) error
	Recv() (*rgraphql.RGQLServerMessage, error)
	RecvTo(*rgraphql.RGQLServerMessage) error
}

type srpcRgraphqlDemo_RgraphqlQueryClient struct {
	srpc.Stream
}

func (x *srpcRgraphqlDemo_RgraphqlQueryClient) Send(m *rgraphql.RGQLClientMessage) error {
	if m == nil {
		return nil
	}
	return x.MsgSend(m)
}

func (x *srpcRgraphqlDemo_RgraphqlQueryClient) Recv() (*rgraphql.RGQLServerMessage, error) {
	m := new(rgraphql.RGQLServerMessage)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRgraphqlDemo_RgraphqlQueryClient) RecvTo(m *rgraphql.RGQLServerMessage) error {
	return x.MsgRecv(m)
}

type SRPCRgraphqlDemoServer interface {
	// RgraphqlQuery opens a two-way rgraphql query tree stream.
	RgraphqlQuery(SRPCRgraphqlDemo_RgraphqlQueryStream) error
}

const SRPCRgraphqlDemoServiceID = "app.service.RgraphqlDemo"

type SRPCRgraphqlDemoHandler struct {
	serviceID string
	impl      SRPCRgraphqlDemoServer
}

// NewSRPCRgraphqlDemoHandler constructs a new RPC handler.
// serviceID: if empty, uses default: app.service.RgraphqlDemo
func NewSRPCRgraphqlDemoHandler(impl SRPCRgraphqlDemoServer, serviceID string) srpc.Handler {
	if serviceID == "" {
		serviceID = SRPCRgraphqlDemoServiceID
	}
	return &SRPCRgraphqlDemoHandler{impl: impl, serviceID: serviceID}
}

// SRPCRegisterRgraphqlDemo registers the implementation with the mux.
// Uses the default serviceID: app.service.RgraphqlDemo
func SRPCRegisterRgraphqlDemo(mux srpc.Mux, impl SRPCRgraphqlDemoServer) error {
	return mux.Register(NewSRPCRgraphqlDemoHandler(impl, ""))
}

func (d *SRPCRgraphqlDemoHandler) GetServiceID() string { return d.serviceID }

func (SRPCRgraphqlDemoHandler) GetMethodIDs() []string {
	return []string{
		"RgraphqlQuery",
	}
}

func (d *SRPCRgraphqlDemoHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "RgraphqlQuery":
		return true, d.InvokeMethod_RgraphqlQuery(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCRgraphqlDemoHandler) InvokeMethod_RgraphqlQuery(impl SRPCRgraphqlDemoServer, strm srpc.Stream) error {
	clientStrm := &srpcRgraphqlDemo_RgraphqlQueryStream{strm}
	return impl.RgraphqlQuery(clientStrm)
}

type SRPCRgraphqlDemo_RgraphqlQueryStream interface {
	srpc.Stream
	Send(*rgraphql.RGQLServerMessage) error
	SendAndClose(*rgraphql.RGQLServerMessage) error
	Recv() (*rgraphql.RGQLClientMessage, error)
	RecvTo(*rgraphql.RGQLClientMessage) error
}

type srpcRgraphqlDemo_RgraphqlQueryStream struct {
	srpc.Stream
}

func (x *srpcRgraphqlDemo_RgraphqlQueryStream) Send(m *rgraphql.RGQLServerMessage) error {
	return x.MsgSend(m)
}

func (x *srpcRgraphqlDemo_RgraphqlQueryStream) SendAndClose(m *rgraphql.RGQLServerMessage) error {
	if m != nil {
		if err := x.MsgSend(m); err != nil {
			return err
		}
	}
	return x.CloseSend()
}

func (x *srpcRgraphqlDemo_RgraphqlQueryStream) Recv() (*rgraphql.RGQLClientMessage, error) {
	m := new(rgraphql.RGQLClientMessage)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcRgraphqlDemo_RgraphqlQueryStream) RecvTo(m *rgraphql.RGQLClientMessage) error {
	return x.MsgRecv(m)
}
